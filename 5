"""
Лабораторная работа №5
Задана рекуррентная функция. Область определения функции – натуральные числа. Написать программу сравнительного вычисления
данной функции рекурсивно и итерационно. Определить границы применимости рекурсивного и итерационного подхода.
Результаты сравнительного исследования времени вычисления представить в табличной и графической форме в виде отчета по
лабораторной работе.


F(x<2) = 5; F(n) = 5-F(n-1)-(n-2) (при n >17), F(n)=(n-2) * F(n-1) (при 2=<n<=17) (Вариант 13)
"""


import time
import matplotlib.pyplot as plt
from sys import setrecursionlimit



def recursive_f(n):  # рекурсивное решение
    if n < 2:
        return 5
    elif n>17:
        return 5-recursive_f(n-1)-(n-2)
    elif n>=2 and n<=17:
        return (n-2) * recursive_f(n-1)


def iterative_f(n):
    fn = [0 for i in range(n + 17)]
    for i in range(2):
        fn[i]=5
    for i in range(n + 17):
        fn[i] = 5 - fn[i - 1] - (i - 2)
    for i in range(2,18):
        fn[i] = (n - 2) * fn[n - 1]
    return fn[n]

setrecursionlimit(1000001)

print("Введите натуральное число n")
n = int(input())
k = 1
if n > 25:
    k = int(input(
        "\nЧисло n > 25. Хотите продолжить ? Это может занять существенное время. (Да: 1 / Нет: 0):\n"))
while k != 0 and k != 1:
    k = int(input("\nВы ввели не 1 и не 0. Введите 1, чтобы продолжить или 0, чтобы завершить программу:\n"))
if k == 1:
    recursive_times = []  # создание списков для дальнейшего построения таблицы
    recursive_values = []
    iterative_times = []
    iterative_values = []
    n_values = list(range(1, n + 1))

    for n in n_values:  # заполнение списков данными

        start = time.time()
        recursive_values.append(recursive_f(n))
        end = time.time()
        recursive_times.append(end - start)

        start = time.time()
        iterative_values.append(iterative_f(n))
        end = time.time()
        iterative_times.append(end - start)

    table_data = []  # создание и заполнение последующей таблицы
    for i, n in enumerate(n_values):
        table_data.append([n, recursive_times[i], iterative_times[i], recursive_values[i], iterative_values[i]])

    print('{:<7}|{:<25}|{:<25}|{:<25}|{:<25}'.format('n', 'Время рекурсии (с)', 'Время итерации (с)',
                                                     'Значение рекурсии', 'Значение итерации'))  # вывод таблицы
    print('-' * 105)
    for data in table_data:
        print('{:<7}|{:<25}|{:<25}|{:<25}|{:<25}'.format(data[0], data[1], data[2], data[3], data[4]))

    plt.plot(n_values, iterative_times, label='Итерация')
    plt.plot(n_values, recursive_times, label='Рекурсия')  # вывод графиков
    plt.xlabel('n')
    plt.ylabel('Время (с)')
    plt.title('Сравнение рекурсивного и итерационного подхода')
    plt.legend()
    plt.show()

print("\nРабота программы завершена.\n")

